/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vue;

import dao.IPlayerDAO;
import dao.IBallBoyDAO;
import dao.IBallBoyOfGameDAO;
import dao.IRefereeDAO;
import dao.IGameDAO;
import dao.IRefereeOfGameDAO;
import dao.IReservationDAO;
import dao.mysql.MySQLManager;
import dao.mysql.MySQLPlayerDAO;
import dao.mysql.MySQLBallBoyDAO;
import dao.mysql.MySQLBallBoyOfGameDAO;
import dao.mysql.MySQLRefereeDAO;
import dao.mysql.MySQLGameDAO;
import dao.mysql.MySQLRefereeOfGameDAO;
import dao.mysql.MySQLReservationDAO;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import metier.BallBoy;
import metier.Player;
import metier.Referee;
import metier.Game;
import metier.Reservation;

/**
 *
 * @author xtz_j
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {        
        initComponents();
        
        setConnectedUserType("ADMIN", null);
        setupMainPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMatchDialog = new javax.swing.JDialog();
        player2ComboBox = new javax.swing.JComboBox<>();
        player1ComboBox = new javax.swing.JComboBox<>();
        player3ComboBox = new javax.swing.JComboBox<>();
        player4ComboBox = new javax.swing.JComboBox<>();
        lineRefereesScrollPane = new javax.swing.JScrollPane();
        refereesListPane = new javax.swing.JList<>();
        ballBoyScrollPane = new javax.swing.JScrollPane();
        ballBoysListPane = new javax.swing.JList<>();
        mainRefereeComboBox = new javax.swing.JComboBox<>();
        mainRefereeLabel = new javax.swing.JLabel();
        lineRefereeLabel = new javax.swing.JLabel();
        ballBoyLabel = new javax.swing.JLabel();
        matchDateLabel = new javax.swing.JLabel();
        matchDateComboBox = new javax.swing.JComboBox<>();
        matchTimeLabel = new javax.swing.JLabel();
        matchTimeComboBox = new javax.swing.JComboBox<>();
        playerLabel = new javax.swing.JLabel();
        confirmAddMatchButton = new javax.swing.JButton();
        cancelAddMatchButton = new javax.swing.JButton();
        addMatchInfoLabel = new javax.swing.JLabel();
        addMatchTitleLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        addMatchCourtComboBox = new javax.swing.JComboBox<>();
        matchDateLabel1 = new javax.swing.JLabel();
        playerLabel1 = new javax.swing.JLabel();
        scoreTeam1Label = new javax.swing.JLabel();
        score1Team1Spinner = new javax.swing.JSpinner();
        scoreTeam2Label = new javax.swing.JLabel();
        score2Team1Spinner = new javax.swing.JSpinner();
        score3Team1Spinner = new javax.swing.JSpinner();
        score1Team2Spinner = new javax.swing.JSpinner();
        score2Team2Spinner = new javax.swing.JSpinner();
        score3Team2Spinner = new javax.swing.JSpinner();
        roundLabel = new javax.swing.JLabel();
        roundComboBox = new javax.swing.JComboBox<>();
        addSomebodyDialog = new javax.swing.JDialog();
        addSomebodyTitle = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        nameTextField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        generatePasswordButton = new javax.swing.JButton();
        nationalityLabel = new javax.swing.JLabel();
        nationalityComboBox = new javax.swing.JComboBox<>();
        levelLabel = new javax.swing.JLabel();
        levelComboBox = new javax.swing.JComboBox<>();
        confirmAddSomebodyButton = new javax.swing.JButton();
        cancelAddSomebodyButton = new javax.swing.JButton();
        playerLoginlLabel = new javax.swing.JLabel();
        playerLoginlTextField = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox<>();
        addSomebodyInfoLabel = new javax.swing.JLabel();
        generateLoginButton = new javax.swing.JButton();
        saveCourtDialog = new javax.swing.JDialog();
        saveDateLabel = new javax.swing.JLabel();
        saveDateComboBox = new javax.swing.JComboBox<>();
        saveTimeLabel = new javax.swing.JLabel();
        saveTimeComboBox = new javax.swing.JComboBox<>();
        saveTitleLabel = new javax.swing.JLabel();
        confirmSaveButton = new javax.swing.JButton();
        cancelSaveButton = new javax.swing.JButton();
        saveCourtInfoLabel = new javax.swing.JLabel();
        saveCourtLabel = new javax.swing.JLabel();
        saveCourtComboBox = new javax.swing.JComboBox<>();
        connectionDialog = new javax.swing.JDialog();
        connectionTitleLabel = new javax.swing.JLabel();
        userLoginLabel = new javax.swing.JLabel();
        userLoginTextField = new javax.swing.JTextField();
        userPasswordLabel = new javax.swing.JLabel();
        userPassword = new javax.swing.JPasswordField();
        confirmConnectionButton = new javax.swing.JButton();
        cancleConnectionButton = new javax.swing.JButton();
        connectionInfoLabel = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        courtComboBox = new javax.swing.JComboBox<>();
        addMatchButton = new javax.swing.JButton();
        addSomebodyButton = new javax.swing.JButton();
        saveCourtButton = new javax.swing.JButton();
        connectionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        planningPart1Table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        planningPart2Table = new javax.swing.JTable();
        connectionStatusLabel = new javax.swing.JLabel();

        addMatchDialog.setAlwaysOnTop(true);
        addMatchDialog.setResizable(false);

        player2ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Joureur 1", "Joueur 2", "Joueur 3", "Joueur 4", "Joueur 5", "Joueur 6", "Joueur 7", "Joueur 8" }));

        player1ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Joureur 1", "Joueur 2", "Joueur 3", "Joueur 4", "Joueur 5", "Joueur 6", "Joueur 7", "Joueur 8" }));

        player3ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Joureur 1", "Joueur 2", "Joueur 3", "Joueur 4", "Joueur 5", "Joueur 6", "Joueur 7", "Joueur 8" }));

        player4ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Joureur 1", "Joueur 2", "Joueur 3", "Joueur 4", "Joueur 5", "Joueur 6", "Joueur 7", "Joueur 8" }));

        refereesListPane.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "ABED Karim", "BASTIEN Benoît", "BATTA Florent", "BEN EL HADJ Hakim", "BRISARD Jérôme", "BUQUET Ruddy", "DECHEPY Bastien", "DELAJOD Willy" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lineRefereesScrollPane.setViewportView(refereesListPane);

        ballBoysListPane.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "BROUSSET PIERRE", "CAYRE LUDOVIC", "GARCES JEROME", "POITE ROMAIN", "RAYNAL MATHIEU", "ROZIER JEREMY" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ballBoyScrollPane.setViewportView(ballBoysListPane);

        mainRefereeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ABED Karim", "BASTIEN Benoît", "BATTA Florent", "BEN EL HADJ Hakim", "BRISARD Jérôme", "BUQUET Ruddy", "DECHEPY Bastien", "DELAJOD Willy" }));
        mainRefereeComboBox.setPreferredSize(new java.awt.Dimension(72, 20));

        mainRefereeLabel.setText("Arbitre de chaise");

        lineRefereeLabel.setText("Arbitre de ligne");

        ballBoyLabel.setText("Ramasseur");

        matchDateLabel.setText("Date");

        matchDateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dimanche 1", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche 2", " " }));

        matchTimeLabel.setText("Horraire");

        matchTimeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10h - 12h", "12h - 14h", "14h - 16h", "16h - 18h" }));

        playerLabel.setText("Equipe 1");

        confirmAddMatchButton.setText("OK");
        confirmAddMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmAddMatchButtonActionPerformed(evt);
            }
        });

        cancelAddMatchButton.setText("Cancel");
        cancelAddMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAddMatchButtonActionPerformed(evt);
            }
        });

        addMatchInfoLabel.setText("<html><p style=\"color:red;\">Informations si les valeurs rentrées ne sont pas correctes et risquent de dépasser<p><html>");

        addMatchTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addMatchTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addMatchTitleLabel.setText("Ajouter / Modifier un Match");

        jLabel1.setText("Court");

        addMatchCourtComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Central", "Annexe 1", "Annexe 2", "Annexe 3" }));

        playerLabel1.setText("Equipe 2");

        scoreTeam1Label.setText("Score équipe 1");

        score1Team1Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        scoreTeam2Label.setText("Score équipe 2");

        score2Team1Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        score3Team1Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        score1Team2Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        score2Team2Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        score3Team2Spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));

        roundLabel.setText("Tour");

        roundComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "16es", "8es", "quarts", "demis", "finale" }));

        javax.swing.GroupLayout addMatchDialogLayout = new javax.swing.GroupLayout(addMatchDialog.getContentPane());
        addMatchDialog.getContentPane().setLayout(addMatchDialogLayout);
        addMatchDialogLayout.setHorizontalGroup(
            addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMatchDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                        .addComponent(matchDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(matchDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(matchTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(matchTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addMatchCourtComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roundLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roundComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(playerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                .addComponent(matchDateLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addContainerGap(153, Short.MAX_VALUE))
            .addGroup(addMatchDialogLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(addMatchTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(addMatchDialogLayout.createSequentialGroup()
                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mainRefereeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addMatchDialogLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(addMatchInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addMatchDialogLayout.createSequentialGroup()
                                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lineRefereesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lineRefereeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ballBoyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ballBoyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(addMatchDialogLayout.createSequentialGroup()
                                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addMatchDialogLayout.createSequentialGroup()
                                        .addComponent(scoreTeam1Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(score1Team1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(mainRefereeLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                                        .addComponent(scoreTeam2Label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(score1Team2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                                        .addComponent(score2Team1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(score3Team1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                                        .addComponent(score2Team2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(score3Team2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(addMatchDialogLayout.createSequentialGroup()
                                    .addComponent(player3ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(player4ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(addMatchDialogLayout.createSequentialGroup()
                                    .addComponent(player1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(playerLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(player2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(confirmAddMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(cancelAddMatchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addMatchDialogLayout.setVerticalGroup(
            addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addMatchDialogLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(addMatchTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchDateLabel)
                    .addComponent(matchDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matchTimeLabel)
                    .addComponent(matchTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addMatchCourtComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roundLabel)
                    .addComponent(roundComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerLabel)
                    .addComponent(playerLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                        .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player3ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player4ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(score1Team1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scoreTeam1Label)
                            .addComponent(score2Team1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(score3Team1Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(scoreTeam2Label)
                            .addComponent(score1Team2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(score2Team2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(score3Team2Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(matchDateLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainRefereeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainRefereeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineRefereeLabel)
                    .addComponent(ballBoyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addMatchDialogLayout.createSequentialGroup()
                        .addComponent(lineRefereesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addMatchInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addMatchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(confirmAddMatchButton)
                            .addComponent(cancelAddMatchButton)))
                    .addComponent(ballBoyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        addMatchInfoLabel.getAccessibleContext().setAccessibleName("");

        addSomebodyDialog.setAlwaysOnTop(true);

        addSomebodyTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addSomebodyTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addSomebodyTitle.setText("Ajouter une personne");

        firstNameLabel.setText("Prenom");

        nameLabel.setText("Nom");

        passwordLabel.setText("Mot de passe");

        generatePasswordButton.setText("Générer automatiquement");

        nationalityLabel.setText("Nationnalité");

        nationalityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Afrique du Sud", "Afghanistan", "Albanie", "Algérie", "Allemagne", "Andorre", "Angola", "Antigua-et-Barbuda", "Arabie Saoudite", "Argentine", "Arménie", "Australie", "Autriche", "Azerbaïdjan", "Bahamas", "Bahreïn", "Bangladesh", "Barbade", "Belgique", "Belize", "Bénin", "Bhoutan", "Biélorussie", "Birmanie", "Bolivie", "Bosnie-Herzégovine", "Botswana", "Brésil", "Brunei", "Bulgarie", "Burkina Faso", "Burundi", "Cambodge", "Cameroun", "Canada", "Cap-Vert", "Chili", "Chine", "Chypre", "Colombie", "Comores", "Corée du Nord", "Corée du Sud", "Costa Rica", "Côte d’Ivoire", "Croatie", "Cuba", "Danemark", "Djibouti", "Dominique", "Égypte", "Émirats arabes unis", "Équateur", "Érythrée", "Espagne", "Eswatini", "Estonie", "États-Unis", "Éthiopie", "Fidji", "Finlande", "France", "Gabon", "Gambie", "Géorgie", "Ghana", "Grèce", "Grenade", "Guatemala", "Guinée", "Guinée équatoriale", "Guinée-Bissau", "Guyana", "Haïti", "Honduras", "Hongrie", "Îles Cook", "Îles Marshall", "Inde", "Indonésie", "Irak", "Iran", "Irlande", "Islande", "Israël", "Italie", "Jamaïque", "Japon", "Jordanie", "Kazakhstan", "Kenya", "Kirghizistan", "Kiribati", "Koweït", "Laos", "Lesotho", "Lettonie", "Liban", "Liberia", "Libye", "Liechtenstein", "Lituanie", "Luxembourg", "Macédoine", "Madagascar", "Malaisie", "Malawi", "Maldives", "Mali", "Malte", "Maroc", "Maurice", "Mauritanie", "Mexique", "Micronésie", "Moldavie", "Monaco", "Mongolie", "Monténégro", "Mozambique", "Namibie", "Nauru", "Népal", "Nicaragua", "Niger", "Nigeria", "Niue", "Norvège", "Nouvelle-Zélande", "Oman", "Ouganda", "Ouzbékistan", "Pakistan", "Palaos", "Palestine", "Panama", "Papouasie-Nouvelle-Guinée", "Paraguay", "Pays-Bas", "Pérou", "Philippines", "Pologne", "Portugal", "Qatar", "République centrafricaine", "République démocratique du Congo", "République Dominicaine", "République du Congo", "République tchèque", "Roumanie", "Royaume-Uni", "Russie", "Rwanda", "Saint-Kitts-et-Nevis", "Saint-Vincent-et-les-Grenadines", "Sainte-Lucie", "Saint-Marin", "Salomon", "Salvador", "Samoa", "São Tomé-et-Principe", "Sénégal", "Serbie", "Seychelles", "Sierra Leone", "Singapour", "Slovaquie", "Slovénie", "Somalie", "Soudan", "Soudan du Sud", "Sri Lanka", "Suède", "Suisse", "Suriname", "Syrie", "Tadjikistan", "Tanzanie", "Tchad", "Thaïlande", "Timor oriental", "Togo", "Tonga", "Trinité-et-Tobago", "Tunisie", "Turkménistan", "Turquie", "Tuvalu", "Ukraine", "Uruguay", "Vanuatu", "Vatican", "Venezuela", "Viêt Nam", "Yémen", "Zambie", "Zimbabwe" }));
        nationalityComboBox.setEnabled(false);

        levelLabel.setText("Catégorie");

        levelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pas de callification", "JAT2", "ITT1 ou +" }));

        confirmAddSomebodyButton.setText("OK");
        confirmAddSomebodyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmAddSomebodyButtonActionPerformed(evt);
            }
        });

        cancelAddSomebodyButton.setText("Cancel");
        cancelAddSomebodyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAddSomebodyButtonActionPerformed(evt);
            }
        });

        playerLoginlLabel.setText("Identifiant");

        typeLabel.setText("Status");

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ramasseur de balle", "Joueur", "Arbitre" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        addSomebodyInfoLabel.setText("<html><p style=\"color:red;\">Informations si les valeurs rentrées ne sont pas correctes et risquent de dépasser<p><html>");

        generateLoginButton.setText("Générer automatiquement");

        javax.swing.GroupLayout addSomebodyDialogLayout = new javax.swing.GroupLayout(addSomebodyDialog.getContentPane());
        addSomebodyDialog.getContentPane().setLayout(addSomebodyDialogLayout);
        addSomebodyDialogLayout.setHorizontalGroup(
            addSomebodyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSomebodyDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addSomebodyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateLoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addSomebodyDialogLayout.createSequentialGroup()
                        .addComponent(confirmAddSomebodyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelAddSomebodyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addSomebodyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(addSomebodyInfoLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(passwordField)
                        .addComponent(addSomebodyTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(firstNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(firstNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(nationalityLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(levelLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(generatePasswordButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nationalityComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(levelComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(playerLoginlLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(playerLoginlTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(typeLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(183, Short.MAX_VALUE))
        );
        addSomebodyDialogLayout.setVerticalGroup(
            addSomebodyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSomebodyDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addSomebodyTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerLoginlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerLoginlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateLoginButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generatePasswordButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nationalityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nationalityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(levelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(levelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addSomebodyInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addSomebodyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmAddSomebodyButton)
                    .addComponent(cancelAddSomebodyButton))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        saveCourtDialog.setAlwaysOnTop(true);

        saveDateLabel.setText("Date");

        saveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dimanche 1", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche 2", " " }));

        saveTimeLabel.setText("Horraire");

        saveTimeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10h - 12h", "12h - 14h", "14h - 16h", "16h - 18h" }));

        saveTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveTitleLabel.setText("Réserver un court");

        confirmSaveButton.setText("OK");
        confirmSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmSaveButtonActionPerformed(evt);
            }
        });

        cancelSaveButton.setText("Cancel");
        cancelSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSaveButtonActionPerformed(evt);
            }
        });

        saveCourtInfoLabel.setText("<html><p style=\"color:red;\">Informations si les valeurs rentrées ne sont pas correctes et risquent de dépasser<p><html>");

        saveCourtLabel.setText("Court");

        saveCourtComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Central", "Annexe 1", "Annexe 2", "Annexe 3" }));

        javax.swing.GroupLayout saveCourtDialogLayout = new javax.swing.GroupLayout(saveCourtDialog.getContentPane());
        saveCourtDialog.getContentPane().setLayout(saveCourtDialogLayout);
        saveCourtDialogLayout.setHorizontalGroup(
            saveCourtDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveCourtDialogLayout.createSequentialGroup()
                .addGroup(saveCourtDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(saveCourtDialogLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(saveTitleLabel))
                    .addGroup(saveCourtDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(saveCourtDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, saveCourtDialogLayout.createSequentialGroup()
                                .addComponent(saveCourtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveCourtComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(saveCourtDialogLayout.createSequentialGroup()
                                .addComponent(saveDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveTimeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(saveCourtDialogLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(confirmSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, saveCourtDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveCourtInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        saveCourtDialogLayout.setVerticalGroup(
            saveCourtDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveCourtDialogLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(saveTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(saveCourtDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveDateLabel)
                    .addComponent(saveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveTimeLabel)
                    .addComponent(saveTimeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(saveCourtDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveCourtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveCourtComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveCourtInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(saveCourtDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmSaveButton)
                    .addComponent(cancelSaveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        connectionDialog.setAlwaysOnTop(true);
        connectionDialog.setResizable(false);

        connectionTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        connectionTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        connectionTitleLabel.setText("Connexion");

        userLoginLabel.setText("Identifiant");

        userPasswordLabel.setText("Mot de passe");

        confirmConnectionButton.setText("Se connecter");
        confirmConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmConnectionButtonActionPerformed(evt);
            }
        });

        cancleConnectionButton.setText("Annuler");
        cancleConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleConnectionButtonActionPerformed(evt);
            }
        });

        connectionInfoLabel.setText("<html><p style=\"color:red;\">Informations si les valeurs rentrées ne sont pas correctes et risquent de dépasser<p><html>");

        javax.swing.GroupLayout connectionDialogLayout = new javax.swing.GroupLayout(connectionDialog.getContentPane());
        connectionDialog.getContentPane().setLayout(connectionDialogLayout);
        connectionDialogLayout.setHorizontalGroup(
            connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectionDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectionTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(userLoginTextField)
                    .addComponent(userPassword)
                    .addGroup(connectionDialogLayout.createSequentialGroup()
                        .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userLoginLabel)
                            .addComponent(userPasswordLabel)
                            .addGroup(connectionDialogLayout.createSequentialGroup()
                                .addComponent(confirmConnectionButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancleConnectionButton)))
                        .addGap(0, 210, Short.MAX_VALUE))
                    .addComponent(connectionInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        connectionDialogLayout.setVerticalGroup(
            connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectionDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectionTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userLoginLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userLoginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userPasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectionInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmConnectionButton)
                    .addComponent(cancleConnectionButton))
                .addContainerGap(107, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Planning des Matchs");
        setBackground(new java.awt.Color(240, 0, 0));
        setMinimumSize(new java.awt.Dimension(100, 100));

        title.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Planning du court central");

        courtComboBox.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        courtComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Central", "Annexe 1", "Annexe 2", "Annexe 3" }));
        courtComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courtComboBoxActionPerformed(evt);
            }
        });

        addMatchButton.setText("Ajouter un match");
        addMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMatchButtonActionPerformed(evt);
            }
        });

        addSomebodyButton.setText("Ajouter quelqu'un");
        addSomebodyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSomebodyButtonActionPerformed(evt);
            }
        });

        saveCourtButton.setText("Réserver un terrain");
        saveCourtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCourtButtonActionPerformed(evt);
            }
        });

        connectionButton.setText("Connexion");
        connectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionButtonActionPerformed(evt);
            }
        });

        planningPart1Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"10h - 12h", null, null, null, null},
                {"12h - 14h", null, null, null, null},
                {"14h - 16h", null, null, null, null},
                {"16h - 18h", null, null, null, null}
            },
            new String [] {
                "", "Dimanche 1", "Lundi", "Mardi", "Mercredi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        planningPart1Table.setRowHeight(36);
        planningPart1Table.getTableHeader().setReorderingAllowed(false);
        planningPart1Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                planningPart1TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(planningPart1Table);
        if (planningPart1Table.getColumnModel().getColumnCount() > 0) {
            planningPart1Table.getColumnModel().getColumn(0).setResizable(false);
            planningPart1Table.getColumnModel().getColumn(1).setResizable(false);
            planningPart1Table.getColumnModel().getColumn(2).setResizable(false);
            planningPart1Table.getColumnModel().getColumn(3).setResizable(false);
            planningPart1Table.getColumnModel().getColumn(4).setResizable(false);
        }

        planningPart2Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"10h - 12h", null, null, null, null},
                {"12h - 14h", null, null, null, null},
                {"14h - 16h", null, null, null, null},
                {"16h - 18h", null, null, null, null}
            },
            new String [] {
                "", "Jeudi", "Vendredi", "Samedi", "Dimanche 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        planningPart2Table.setRowHeight(36);
        planningPart2Table.getTableHeader().setReorderingAllowed(false);
        planningPart2Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                planningPart2TableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(planningPart2Table);
        if (planningPart2Table.getColumnModel().getColumnCount() > 0) {
            planningPart2Table.getColumnModel().getColumn(0).setResizable(false);
            planningPart2Table.getColumnModel().getColumn(1).setResizable(false);
            planningPart2Table.getColumnModel().getColumn(2).setResizable(false);
            planningPart2Table.getColumnModel().getColumn(3).setResizable(false);
            planningPart2Table.getColumnModel().getColumn(4).setResizable(false);
        }

        connectionStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        connectionStatusLabel.setText("Connection status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(addMatchButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addSomebodyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveCourtButton, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(courtComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(connectionStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectionButton)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(courtComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(connectionButton)
                        .addComponent(connectionStatusLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addMatchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addSomebodyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveCourtButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMatchButtonActionPerformed
        editedGame = null;
        openAddMatchPanel();
    }//GEN-LAST:event_addMatchButtonActionPerformed

    private void saveCourtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCourtButtonActionPerformed
        saveDateComboBox.setSelectedIndex(0);
        saveTimeComboBox.setSelectedIndex(0);
        saveCourtComboBox.setSelectedIndex(0);
        saveCourtInfoLabel.setText("");
        
        saveCourtDialog.setVisible(true);
        saveCourtDialog.setSize(400, 220);
    }//GEN-LAST:event_saveCourtButtonActionPerformed

    private void cancelSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSaveButtonActionPerformed
        saveCourtDialog.setVisible(false);
    }//GEN-LAST:event_cancelSaveButtonActionPerformed

    private void addSomebodyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSomebodyButtonActionPerformed
        setupAddSomebodyPanel();
        
        addSomebodyDialog.setVisible(true);
        addSomebodyDialog.setSize(470, 640);
    }//GEN-LAST:event_addSomebodyButtonActionPerformed

    private void cancelAddSomebodyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAddSomebodyButtonActionPerformed
        addSomebodyDialog.setVisible(false);
    }//GEN-LAST:event_cancelAddSomebodyButtonActionPerformed

    private void confirmAddSomebodyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmAddSomebodyButtonActionPerformed
        String firstName = firstNameTextField.getText();
        String name = nameTextField.getText();
        String login = playerLoginlTextField.getText();
        String password = String.valueOf(passwordField.getPassword());
        String nationality = (String) nationalityComboBox.getSelectedItem();
        String level = (String) levelComboBox.getSelectedItem();

        switch(typeComboBox.getSelectedIndex()){
            case 0:
                ballBoyDAO.createBallBoy(new BallBoy(-1, firstName, name));
                break;
            case 1:
                playerDAO.createPlayer(new Player(-1, firstName, name, nationality, login, password));
                break;
            case 2:
                refereeDAO.createReferee(new Referee(-1, firstName, name, nationality, level));
                break;
        }

        addSomebodyDialog.setVisible(false);
    }//GEN-LAST:event_confirmAddSomebodyButtonActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        setupAddSomebodyPanel();
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void cancelAddMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAddMatchButtonActionPerformed
        addMatchDialog.setVisible(false);
    }//GEN-LAST:event_cancelAddMatchButtonActionPerformed

    private void confirmAddMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmAddMatchButtonActionPerformed
        int id = editedGame == null ? -1 : editedGame.getId();
        int date = matchDateComboBox.getSelectedIndex();
        int time = matchTimeComboBox.getSelectedIndex();
        int courtIndex = addMatchCourtComboBox.getSelectedIndex();
        int roundIndex = roundComboBox.getSelectedIndex();
        
        Player player1 = players.get(player1ComboBox.getSelectedIndex());
        Player player2 = players.get(player2ComboBox.getSelectedIndex());
        Player player3 = player3ComboBox.getSelectedIndex() > 0 ? players.get(player3ComboBox.getSelectedIndex() - 1) : null;
        Player player4 = player4ComboBox.getSelectedIndex() > 0 ? players.get(player4ComboBox.getSelectedIndex() - 1) : null;
        Referee mainReferee = referees.get(mainRefereeComboBox.getSelectedIndex());
        
        List<Referee> gameReferees = new ArrayList<>();
        for(int index : refereesListPane.getSelectedIndices()){
            gameReferees.add(referees.get(index));
        }
        
        List<BallBoy> gameBallBoys = new ArrayList<>();
        for(int index : ballBoysListPane.getSelectedIndices()){
            gameBallBoys.add(ballBoys.get(index));
        }
        
        int score1Team1 = (Integer) score1Team1Spinner.getValue();
        int score2Team1 = (Integer) score2Team1Spinner.getValue();
        int score3Team1 = (Integer) score3Team1Spinner.getValue();
        int score1Team2 = (Integer) score1Team2Spinner.getValue();
        int score2Team2 = (Integer) score2Team2Spinner.getValue();
        int score3Team2 = (Integer) score3Team2Spinner.getValue();
        
        Game newGame = new Game(id, date, time, courtIndex, roundIndex, player1, player2, player3, player4, score1Team1, score2Team1, score3Team1, score1Team2, score2Team2, score3Team2, mainReferee, gameReferees, gameBallBoys);
        
        if(editedGame != null){
            gameDAO.updateGame(newGame);
        }else{
            gameDAO.createGame(newGame);
        }
        
        addMatchDialog.setVisible(false);
        setupMainPanel();
    }//GEN-LAST:event_confirmAddMatchButtonActionPerformed

    private void courtComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courtComboBoxActionPerformed
        setupMainPanel();
    }//GEN-LAST:event_courtComboBoxActionPerformed

    private void connectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionButtonActionPerformed
        userLoginTextField.setText("");
        userPassword.setText("");
        connectionInfoLabel.setText("");
        
        connectionDialog.setSize(400, 260);
        connectionDialog.setVisible(true);
    }//GEN-LAST:event_connectionButtonActionPerformed

    private void confirmConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmConnectionButtonActionPerformed
        String password = String.valueOf(userPassword.getPassword());
        
        if(userLoginTextField.getText().equals("admin") && password.equals("admin")){
            setConnectedUserType("ADMIN", null);
        
            connectionDialog.setVisible(false);
        } else {
            Player loggedPlayer = playerDAO.getPlayerByLogin(userLoginTextField.getText());
            
            if(loggedPlayer != null && loggedPlayer.getPassword().equals(password)){
                setConnectedUserType("PLAYER", loggedPlayer);
        
                connectionDialog.setVisible(false);
            }else{
                connectionInfoLabel.setText(toErrorString("Le nom d'utilisateur ou le mot de passe n'est pas correct"));
            }
        }       
    }//GEN-LAST:event_confirmConnectionButtonActionPerformed

    private void cancleConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleConnectionButtonActionPerformed
        connectionDialog.setVisible(false);
    }//GEN-LAST:event_cancleConnectionButtonActionPerformed

    private void planningPart1TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_planningPart1TableMouseClicked
        if(evt.getClickCount() == 2){
            int row = planningPart1Table.rowAtPoint(evt.getPoint());
            int col = planningPart1Table.columnAtPoint(evt.getPoint());
            if (row >= 0 && col >= 0) {
                handleClickAt(row, col - 1);
            }
        }
    }//GEN-LAST:event_planningPart1TableMouseClicked

    private void planningPart2TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_planningPart2TableMouseClicked
        if(evt.getClickCount() == 2){
            int row = planningPart2Table.rowAtPoint(evt.getPoint());
            int col = planningPart2Table.columnAtPoint(evt.getPoint());
            if (row >= 0 && col >= 0) {
                handleClickAt(row, col + 3);
            }
        }
    }//GEN-LAST:event_planningPart2TableMouseClicked

    private void confirmSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmSaveButtonActionPerformed
        int date = saveDateComboBox.getSelectedIndex();
        int time = saveTimeComboBox.getSelectedIndex();
        int courtIndex = saveCourtComboBox.getSelectedIndex();
        
        if(reservationDAO.playerHasReservation(connectedPlayer.getId())){
            saveCourtInfoLabel.setText(toErrorString("Vous avez déjà reservé un terrain"));
        }else if(gameDAO.gameExistAt(date, time, courtIndex)){
            saveCourtInfoLabel.setText(toErrorString("Un match a déjà lieu"));
        }else if(reservationDAO.reservationExistAt(date, time, courtIndex)){
            saveCourtInfoLabel.setText(toErrorString("Le terrain est déjà reservé"));
        }else{
            reservationDAO.createReservation(new Reservation(-1, date, time, courtIndex, connectedPlayer));
        
            setupMainPanel();
            saveCourtDialog.setVisible(false);
        }
    }//GEN-LAST:event_confirmSaveButtonActionPerformed

    private void setupMainPanel(){
        games = gameDAO.getGames(courtComboBox.getSelectedIndex());
        reservations = reservationDAO.getReservations(courtComboBox.getSelectedIndex());
        
        for (int y = 0; y < 4; y++) {
            for (int x = 0; x < 4; x++) {
                planningPart1Table.setValueAt("", y, x + 1);
                planningPart2Table.setValueAt("", y, x + 1);
            }
        }
        
        games.forEach(game -> {
            JTable table = game.getDate() <= 3 ? planningPart1Table : planningPart2Table;
            int x = game.getDate() <= 3 ? game.getDate() : game.getDate() - 4;
            int y = game.getTime();
            table.setValueAt(game.toDisplayString(), y, x + 1);
        });
        
        reservations.forEach(reservation ->{
            JTable table = reservation.getDate() <= 3 ? planningPart1Table : planningPart2Table;
            int x = reservation.getDate() <= 3 ? reservation.getDate() : reservation.getDate() - 4;
            int y = reservation.getTime();
            table.setValueAt(reservation.toDisplayString(), y, x + 1);
        });
    }
    
    private void handleClickAt(int row, int col){
        editedGame = null;
        editedReservation = null;
                
        for(Game game : games){
            if(game.getDate() == col && game.getTime() == row){
                editedGame = game;
            }
        }

        if(editedGame != null && connectedUserType.equals("ADMIN")){
            openAddMatchPanel();
        }else{
            for(Reservation reservation : reservations){
                if(reservation.getDate() == col && reservation.getTime() == row){
                    editedReservation = reservation;
                }
                
                if(editedReservation != null && (editedReservation.getPlayer().equals(connectedPlayer) || connectedUserType.equals("ADMIN"))){
                    int choice = JOptionPane.showConfirmDialog(null, "Annuler la reservation ?", "Annuler la réservation ?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    
                    if(choice == 0){
                        // Confirmation de la suppression
                        reservationDAO.deleteReservation(editedReservation.getId());
                        setupMainPanel();
                    }
                }
            }
        }
    }
    
    private void openAddMatchPanel(){
        player1ComboBox.removeAllItems();
        player2ComboBox.removeAllItems();
        player3ComboBox.removeAllItems();
        player4ComboBox.removeAllItems();
        mainRefereeComboBox.removeAllItems();
        
        player3ComboBox.addItem("-- Aucun joueur --");
        player4ComboBox.addItem("-- Aucun joueur --");
        
        players = playerDAO.getPlayers();
        for(Player player : players){
            String comboBoxValue = player.toDisplayString();
            player1ComboBox.addItem(comboBoxValue);
            player2ComboBox.addItem(comboBoxValue);
            player3ComboBox.addItem(comboBoxValue);
            player4ComboBox.addItem(comboBoxValue);
        }
        
        referees = refereeDAO.getReferees();
        String[] refereesData = new String[referees.size()];
        int i = 0;
        for(Referee referee : referees){
            refereesData[i] = referee.toDisplayString();
            mainRefereeComboBox.addItem(referee.toDisplayString());
            i++;
        }
        
        refereesListPane.setListData(refereesData);
        
        ballBoys = ballBoyDAO.getBallBoys();
        String[] ballBoysData = new String[ballBoys.size()];
        i = 0;
        for(BallBoy ballBoy : ballBoys){
            ballBoysData[i] = ballBoy.toDisplayString();
            i++;
        }
        
        ballBoysListPane.setListData(ballBoysData);
        
        if(editedGame != null){
            matchDateComboBox.setSelectedIndex(editedGame.getDate());
            matchTimeComboBox.setSelectedIndex(editedGame.getTime());
            addMatchCourtComboBox.setSelectedIndex(editedGame.getCourtIndex());
            roundComboBox.setSelectedIndex(editedGame.getRoundIndex());
            
            player1ComboBox.setSelectedIndex(players.indexOf(editedGame.getPlayer1()));
            player2ComboBox.setSelectedIndex(players.indexOf(editedGame.getPlayer2()));
            
            if(editedGame.getPlayer3() != null){
                player3ComboBox.setSelectedIndex(players.indexOf(editedGame.getPlayer3()) + 1);
            }
            
            if(editedGame.getPlayer4() != null){
                player4ComboBox.setSelectedIndex(players.indexOf(editedGame.getPlayer4()) + 1);
            }
            
            mainRefereeComboBox.setSelectedIndex(referees.indexOf(editedGame.getMainReferee()));
            
            int[] indices = new int[editedGame.getReferees().size()];
            
            i = 0;
            for(Referee referee : editedGame.getReferees()){
                indices[i] = referees.indexOf(referee);
                i++;
            }
            
            refereesListPane.setSelectedIndices(indices);
            
            indices = new int[editedGame.getBallBoys().size()];
            
            i = 0;
            for(BallBoy ballBoy : editedGame.getBallBoys()){
                indices[i] = ballBoys.indexOf(ballBoy);
                i++;
            }
            
            ballBoysListPane.setSelectedIndices(indices);
            
            score1Team1Spinner.setValue(editedGame.getScore1Team1());
            score2Team1Spinner.setValue(editedGame.getScore2Team1());
            score3Team1Spinner.setValue(editedGame.getScore3Team1());
            score1Team2Spinner.setValue(editedGame.getScore1Team2());
            score2Team2Spinner.setValue(editedGame.getScore2Team2());
            score3Team2Spinner.setValue(editedGame.getScore3Team2());
            
            addMatchTitleLabel.setText("Modifier un match");
        }else{
            matchDateComboBox.setSelectedIndex(0);
            matchTimeComboBox.setSelectedIndex(0);
            addMatchCourtComboBox.setSelectedIndex(0);
            roundComboBox.setSelectedIndex(0);
            
            player1ComboBox.setSelectedIndex(0);
            player2ComboBox.setSelectedIndex(0);
            mainRefereeComboBox.setSelectedIndex(0);
            addMatchTitleLabel.setText("Ajouter un match");
            
            score1Team1Spinner.setValue(0);
            score2Team1Spinner.setValue(0);
            score3Team1Spinner.setValue(0);
            score1Team2Spinner.setValue(0);
            score2Team2Spinner.setValue(0);
            score3Team2Spinner.setValue(0);
        }
        
        addMatchDialog.setVisible(true);
        addMatchDialog.setSize(420, 720);
    }
    
    private void setConnectedUserType(String userType, Player player){
        connectedUserType = userType;
        connectedPlayer = player;
        
        boolean isAdmin = connectedUserType.equals("ADMIN");
        boolean isPlayer = connectedUserType.equals("PLAYER");
        
        addMatchButton.setEnabled(isAdmin);
        addSomebodyButton.setEnabled(isAdmin);
        saveCourtButton.setEnabled(isPlayer);
        
        String connectionStatus;
        if(isAdmin){
            connectionStatus = "Connecté en tant qu'administrateur";
        }else if(isPlayer){
            connectionStatus = String.format("Connecté en tant que %s", connectedPlayer.toDisplayString());
        }else{
            connectionStatus = "Non connecté";
        }
        
        connectionStatusLabel.setText(connectionStatus);
    }
    
    private void setupAddSomebodyPanel(){
        int typeIndex = typeComboBox.getSelectedIndex();
        
        boolean isPlayer = typeIndex == 1;
        boolean isReferee = typeIndex == 2;
        
        playerLoginlTextField.setEnabled(isPlayer);
        passwordField.setEnabled(isPlayer);
        generatePasswordButton.setEnabled(isPlayer);
        nationalityComboBox.setEnabled(isPlayer || isReferee);
        levelComboBox.setEnabled(isReferee);
        addSomebodyInfoLabel.setText("");
    }
    
    private String toErrorString(String s){
        return String.format("<html><p style='color:red;'>%s</p></html>", s);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MySQLManager.connect();
            Connection connection = MySQLManager.getConnection();
                        
            playerDAO = new MySQLPlayerDAO();
            playerDAO.setConnection(connection);
            
            ballBoyDAO = new MySQLBallBoyDAO();
            ballBoyDAO.setConnection(connection);
            
            refereeDAO = new MySQLRefereeDAO();
            refereeDAO.setConnection(connection);
            
            refereeOfGameDAO = new MySQLRefereeOfGameDAO();
            refereeOfGameDAO.setConnection(connection);
            refereeOfGameDAO.setRefereeDAO(refereeDAO);
            
            ballBoyOfGameDAO = new MySQLBallBoyOfGameDAO();
            ballBoyOfGameDAO.setConnection(connection);
            ballBoyOfGameDAO.setBallBoyDAO(ballBoyDAO);
            
            reservationDAO = new MySQLReservationDAO();
            reservationDAO.setConnection(connection);
            reservationDAO.setPlayerDAO(playerDAO);
            
            gameDAO = new MySQLGameDAO();
            gameDAO.setConnection(connection);
            gameDAO.setPlayerDAO(playerDAO);
            gameDAO.setRefereeDAO(refereeDAO);
            gameDAO.setRefereeOfGame(refereeOfGameDAO);
            gameDAO.setBallBoyOfGame(ballBoyOfGameDAO);
            
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMatchButton;
    private javax.swing.JComboBox<String> addMatchCourtComboBox;
    private javax.swing.JDialog addMatchDialog;
    private javax.swing.JLabel addMatchInfoLabel;
    private javax.swing.JLabel addMatchTitleLabel;
    private javax.swing.JButton addSomebodyButton;
    private javax.swing.JDialog addSomebodyDialog;
    private javax.swing.JLabel addSomebodyInfoLabel;
    private javax.swing.JLabel addSomebodyTitle;
    private javax.swing.JLabel ballBoyLabel;
    private javax.swing.JScrollPane ballBoyScrollPane;
    private javax.swing.JList<String> ballBoysListPane;
    private javax.swing.JButton cancelAddMatchButton;
    private javax.swing.JButton cancelAddSomebodyButton;
    private javax.swing.JButton cancelSaveButton;
    private javax.swing.JButton cancleConnectionButton;
    private javax.swing.JButton confirmAddMatchButton;
    private javax.swing.JButton confirmAddSomebodyButton;
    private javax.swing.JButton confirmConnectionButton;
    private javax.swing.JButton confirmSaveButton;
    private javax.swing.JButton connectionButton;
    private javax.swing.JDialog connectionDialog;
    private javax.swing.JLabel connectionInfoLabel;
    private javax.swing.JLabel connectionStatusLabel;
    private javax.swing.JLabel connectionTitleLabel;
    private javax.swing.JComboBox<String> courtComboBox;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JButton generateLoginButton;
    private javax.swing.JButton generatePasswordButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> levelComboBox;
    private javax.swing.JLabel levelLabel;
    private javax.swing.JLabel lineRefereeLabel;
    private javax.swing.JScrollPane lineRefereesScrollPane;
    private javax.swing.JComboBox<String> mainRefereeComboBox;
    private javax.swing.JLabel mainRefereeLabel;
    private javax.swing.JComboBox<String> matchDateComboBox;
    private javax.swing.JLabel matchDateLabel;
    private javax.swing.JLabel matchDateLabel1;
    private javax.swing.JComboBox<String> matchTimeComboBox;
    private javax.swing.JLabel matchTimeLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JComboBox<String> nationalityComboBox;
    private javax.swing.JLabel nationalityLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTable planningPart1Table;
    private javax.swing.JTable planningPart2Table;
    private javax.swing.JComboBox<String> player1ComboBox;
    private javax.swing.JComboBox<String> player2ComboBox;
    private javax.swing.JComboBox<String> player3ComboBox;
    private javax.swing.JComboBox<String> player4ComboBox;
    private javax.swing.JLabel playerLabel;
    private javax.swing.JLabel playerLabel1;
    private javax.swing.JLabel playerLoginlLabel;
    private javax.swing.JTextField playerLoginlTextField;
    private javax.swing.JList<String> refereesListPane;
    private javax.swing.JComboBox<String> roundComboBox;
    private javax.swing.JLabel roundLabel;
    private javax.swing.JButton saveCourtButton;
    private javax.swing.JComboBox<String> saveCourtComboBox;
    private javax.swing.JDialog saveCourtDialog;
    private javax.swing.JLabel saveCourtInfoLabel;
    private javax.swing.JLabel saveCourtLabel;
    private javax.swing.JComboBox<String> saveDateComboBox;
    private javax.swing.JLabel saveDateLabel;
    private javax.swing.JComboBox<String> saveTimeComboBox;
    private javax.swing.JLabel saveTimeLabel;
    private javax.swing.JLabel saveTitleLabel;
    private javax.swing.JSpinner score1Team1Spinner;
    private javax.swing.JSpinner score1Team2Spinner;
    private javax.swing.JSpinner score2Team1Spinner;
    private javax.swing.JSpinner score2Team2Spinner;
    private javax.swing.JSpinner score3Team1Spinner;
    private javax.swing.JSpinner score3Team2Spinner;
    private javax.swing.JLabel scoreTeam1Label;
    private javax.swing.JLabel scoreTeam2Label;
    private javax.swing.JLabel title;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JLabel userLoginLabel;
    private javax.swing.JTextField userLoginTextField;
    private javax.swing.JPasswordField userPassword;
    private javax.swing.JLabel userPasswordLabel;
    // End of variables declaration//GEN-END:variables

    static IPlayerDAO playerDAO;
    static IBallBoyDAO ballBoyDAO;
    static IRefereeDAO refereeDAO;
    static IGameDAO gameDAO;
    static IRefereeOfGameDAO refereeOfGameDAO;
    static IBallBoyOfGameDAO ballBoyOfGameDAO;
    static IReservationDAO reservationDAO;
    
    static List<Player> players;
    static List<BallBoy> ballBoys;
    static List<Referee> referees;
    static List<Game> games;
    static List<Reservation> reservations;
    
    static Game editedGame;
    static Reservation editedReservation;
    static String connectedUserType;
    static Player connectedPlayer;
}